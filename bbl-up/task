#!/bin/bash -xeu

# shellcheck disable=SC1091
source cf-deployment-concourse-tasks/shared-functions

function check_fast_fails() {
  set +x

  if [ "${create_lbs}" != "true" ]; then
    if [ "${BBL_IAAS}" != "gcp" ]; then
      echo "\$IS_BOSH_LITE requires \$BBL_IAAS to be set to 'gcp'"
      exit 1
    fi
  else
    if [ -z "${LB_DOMAIN}" ]; then
      echo "\$LB_DOMAIN is a required parameter.  Please set the domain."
      exit 1
    fi

    if [ -z "${BBL_LB_CERT}"  ]; then
      echo "\$BBL_LB_CERT is a required parameter"
      exit 1
    fi

    if [ -z "${BBL_LB_KEY}"  ]; then
      echo "\$BBL_LB_KEY is a required parameter"
      exit 1
    fi
  fi

  check_bbl_input_params

  set -x
}

function write_bbl_certs() {
  set +x
  if [ -f "${BBL_LB_CERT}" ]; then
    bbl_cert_path="${BBL_LB_CERT}"
  else
    echo "${BBL_LB_CERT}" > /tmp/bbl-cert
    bbl_cert_path="/tmp/bbl-cert"
  fi
  if [ -f "${BBL_LB_CERT_CHAIN}" ]; then
    bbl_cert_chain_flag="--lb-chain=${BBL_LB_CERT_CHAIN}"
  elif [ ! -z "${BBL_LB_CERT_CHAIN// }" ]; then
    echo "${BBL_LB_CERT_CHAIN}" > /tmp/bbl-cert-chain
    bbl_cert_chain_flag="--lb-chain=/tmp/bbl-cert-chain"
  fi
  if [ -f "${BBL_LB_KEY}" ]; then
    bbl_key_path="${BBL_LB_KEY}"
  else
    echo "${BBL_LB_KEY}" > /tmp/bbl-key
    bbl_key_path="/tmp/bbl-key"
  fi
  set -x
}

function make_concatenated_operations_file() {
  local root_dir
  root_dir="${1}"

  pushd "${root_dir}/ops-files"
    cat $OPS_FILES | grep -v "\-\-\-" > concatenated-operations.yml
  popd
}

function main() {
  local root_dir
  root_dir="${1}"

  create_lbs=false

  if [ "${IS_BOSH_LITE}" == "false" ] && [ "${SKIP_LB_CREATION}" == "false" ]; then
    create_lbs=true
  fi

  check_fast_fails

  local ops_arguments
  ops_arguments=""

  if [ -n "${OPS_FILES}" ]; then
    make_concatenated_operations_file ${root_dir}
    ops_arguments="--ops-file ${root_dir}/ops-files/concatenated-operations.yml"
  fi

  if [ "${BBL_IAAS}" == "gcp" ]; then
    pushd "env-repo"
      write_gcp_service_account_key
    popd
  fi

  mkdir -p "env-repo/${BBL_STATE_DIR}"
  pushd "env-repo/${BBL_STATE_DIR}"
    bbl version

    local name_flag
    name_flag=""

    if [ -n "${BBL_ENV_NAME}" -a ! -f bbl-state.json ]; then
      name_flag="--name ${BBL_ENV_NAME}"
    fi

    local lb_flags
    lb_flags=""

    if [ "${create_lbs}" == "true" ]; then
      local bbl_cert_chain_flag
      bbl_cert_chain_flag=""
      local bbl_cert_path
      local bbl_cert_key
      write_bbl_certs

      lb_flags="--lb-type=cf --lb-cert=${bbl_cert_path} ${bbl_cert_chain_flag} --lb-key=${bbl_key_path} --lb-domain=${LB_DOMAIN}"
    fi

    bbl plan \
      ${name_flag} \
      ${ops_arguments} \
      ${lb_flags} \
      ${BBL_EXTRA_FLAGS} > "${root_dir}/bbl_plan.txt"

    if [ "${IS_BOSH_LITE}" == "true" ]; then
      cp -r /var/repos/bosh-bootloader/plan-patches/bosh-lite-gcp/* .
    fi
	
    if [ -n "${BBL_CUSTOMISATIONS}" ]; then
	  for CUSTOMISATION in ${BBL_CUSTOMISATIONS}; do
		cp ../../bbl-customisations/${CUSTOMISATION} terraform/
	  done
	fi 

    bbl --debug up \
      ${name_flag} \
      ${lb_flags} \
      ${ops_arguments} \
      ${BBL_EXTRA_FLAGS} > "${root_dir}/bbl_up.txt"
  popd
}

trap "commit_bbl_state_dir ${PWD} 'Update bbl state dir'" EXIT

main ${PWD}
